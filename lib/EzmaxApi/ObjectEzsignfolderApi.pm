=begin comment

eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package EzmaxApi::ObjectEzsignfolderApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use EzmaxApi::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'EzmaxApi::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = EzmaxApi::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# ezsignfolder_archive_v1
#
# Archive the Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param object $body  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_archive_v1' } = {
        summary => 'Archive the Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderArchiveV1Response',
        };
}
# @return EzsignfolderArchiveV1Response
#
sub ezsignfolder_archive_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_archive_v1");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling ezsignfolder_archive_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/archive';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderArchiveV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_batch_download_v1
#
# Download multiples files from an Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderBatchDownloadV1Request $ezsignfolder_batch_download_v1_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_batch_download_v1_request' => {
        data_type => 'EzsignfolderBatchDownloadV1Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_batch_download_v1' } = {
        summary => 'Download multiples files from an Ezsignfolder',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub ezsignfolder_batch_download_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_batch_download_v1");
    }

    # verify the required parameter 'ezsignfolder_batch_download_v1_request' is set
    unless (exists $args{'ezsignfolder_batch_download_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_batch_download_v1_request' when calling ezsignfolder_batch_download_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/zip', 'application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_batch_download_v1_request'}) {
        $_body_data = $args{'ezsignfolder_batch_download_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# ezsignfolder_create_object_v1
#
# Create a new Ezsignfolder
#
# @param ARRAY[EzsignfolderCreateObjectV1Request] $ezsignfolder_create_object_v1_request  (required)
{
    my $params = {
    'ezsignfolder_create_object_v1_request' => {
        data_type => 'ARRAY[EzsignfolderCreateObjectV1Request]',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_create_object_v1' } = {
        summary => 'Create a new Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderCreateObjectV1Response',
        };
}
# @return EzsignfolderCreateObjectV1Response
#
sub ezsignfolder_create_object_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'ezsignfolder_create_object_v1_request' is set
    unless (exists $args{'ezsignfolder_create_object_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_create_object_v1_request' when calling ezsignfolder_create_object_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_create_object_v1_request'}) {
        $_body_data = $args{'ezsignfolder_create_object_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderCreateObjectV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_create_object_v2
#
# Create a new Ezsignfolder
#
# @param EzsignfolderCreateObjectV2Request $ezsignfolder_create_object_v2_request  (required)
{
    my $params = {
    'ezsignfolder_create_object_v2_request' => {
        data_type => 'EzsignfolderCreateObjectV2Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_create_object_v2' } = {
        summary => 'Create a new Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderCreateObjectV2Response',
        };
}
# @return EzsignfolderCreateObjectV2Response
#
sub ezsignfolder_create_object_v2 {
    my ($self, %args) = @_;

    # verify the required parameter 'ezsignfolder_create_object_v2_request' is set
    unless (exists $args{'ezsignfolder_create_object_v2_request'}) {
      croak("Missing the required parameter 'ezsignfolder_create_object_v2_request' when calling ezsignfolder_create_object_v2");
    }

    # parse inputs
    my $_resource_path = '/2/object/ezsignfolder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_create_object_v2_request'}) {
        $_body_data = $args{'ezsignfolder_create_object_v2_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderCreateObjectV2Response', $response);
    return $_response_object;
}

#
# ezsignfolder_create_object_v3
#
# Create a new Ezsignfolder
#
# @param EzsignfolderCreateObjectV3Request $ezsignfolder_create_object_v3_request  (required)
{
    my $params = {
    'ezsignfolder_create_object_v3_request' => {
        data_type => 'EzsignfolderCreateObjectV3Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_create_object_v3' } = {
        summary => 'Create a new Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderCreateObjectV3Response',
        };
}
# @return EzsignfolderCreateObjectV3Response
#
sub ezsignfolder_create_object_v3 {
    my ($self, %args) = @_;

    # verify the required parameter 'ezsignfolder_create_object_v3_request' is set
    unless (exists $args{'ezsignfolder_create_object_v3_request'}) {
      croak("Missing the required parameter 'ezsignfolder_create_object_v3_request' when calling ezsignfolder_create_object_v3");
    }

    # parse inputs
    my $_resource_path = '/3/object/ezsignfolder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_create_object_v3_request'}) {
        $_body_data = $args{'ezsignfolder_create_object_v3_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderCreateObjectV3Response', $response);
    return $_response_object;
}

#
# ezsignfolder_delete_object_v1
#
# Delete an existing Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_delete_object_v1' } = {
        summary => 'Delete an existing Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderDeleteObjectV1Response',
        };
}
# @return EzsignfolderDeleteObjectV1Response
#
sub ezsignfolder_delete_object_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_delete_object_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderDeleteObjectV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_dispose_ezsignfolders_v1
#
# Dispose Ezsignfolders
#
# @param EzsignfolderDisposeEzsignfoldersV1Request $ezsignfolder_dispose_ezsignfolders_v1_request  (required)
{
    my $params = {
    'ezsignfolder_dispose_ezsignfolders_v1_request' => {
        data_type => 'EzsignfolderDisposeEzsignfoldersV1Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_dispose_ezsignfolders_v1' } = {
        summary => 'Dispose Ezsignfolders',
        params => $params,
        returns => 'EzsignfolderDisposeEzsignfoldersV1Response',
        };
}
# @return EzsignfolderDisposeEzsignfoldersV1Response
#
sub ezsignfolder_dispose_ezsignfolders_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'ezsignfolder_dispose_ezsignfolders_v1_request' is set
    unless (exists $args{'ezsignfolder_dispose_ezsignfolders_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_dispose_ezsignfolders_v1_request' when calling ezsignfolder_dispose_ezsignfolders_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/disposeEzsignfolders';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_dispose_ezsignfolders_v1_request'}) {
        $_body_data = $args{'ezsignfolder_dispose_ezsignfolders_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderDisposeEzsignfoldersV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_dispose_v1
#
# Dispose the Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param object $body  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_dispose_v1' } = {
        summary => 'Dispose the Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderDisposeV1Response',
        };
}
# @return EzsignfolderDisposeV1Response
#
sub ezsignfolder_dispose_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_dispose_v1");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling ezsignfolder_dispose_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderDisposeV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_edit_object_v3
#
# Edit an existing Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderEditObjectV3Request $ezsignfolder_edit_object_v3_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_edit_object_v3_request' => {
        data_type => 'EzsignfolderEditObjectV3Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_edit_object_v3' } = {
        summary => 'Edit an existing Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderEditObjectV3Response',
        };
}
# @return EzsignfolderEditObjectV3Response
#
sub ezsignfolder_edit_object_v3 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_edit_object_v3");
    }

    # verify the required parameter 'ezsignfolder_edit_object_v3_request' is set
    unless (exists $args{'ezsignfolder_edit_object_v3_request'}) {
      croak("Missing the required parameter 'ezsignfolder_edit_object_v3_request' when calling ezsignfolder_edit_object_v3");
    }

    # parse inputs
    my $_resource_path = '/3/object/ezsignfolder/{pkiEzsignfolderID}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_edit_object_v3_request'}) {
        $_body_data = $args{'ezsignfolder_edit_object_v3_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderEditObjectV3Response', $response);
    return $_response_object;
}

#
# ezsignfolder_end_prematurely_v1
#
# End prematurely
#
# @param int $pki_ezsignfolder_id  (required)
# @param object $body  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_end_prematurely_v1' } = {
        summary => 'End prematurely',
        params => $params,
        returns => 'EzsignfolderEndPrematurelyV1Response',
        };
}
# @return EzsignfolderEndPrematurelyV1Response
#
sub ezsignfolder_end_prematurely_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_end_prematurely_v1");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling ezsignfolder_end_prematurely_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/endPrematurely';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderEndPrematurelyV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_actionable_elements_v1
#
# Retrieve actionable elements for the Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_actionable_elements_v1' } = {
        summary => 'Retrieve actionable elements for the Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderGetActionableElementsV1Response',
        };
}
# @return EzsignfolderGetActionableElementsV1Response
#
sub ezsignfolder_get_actionable_elements_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_actionable_elements_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetActionableElementsV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_attachment_count_v1
#
# Retrieve Attachment count
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_attachment_count_v1' } = {
        summary => 'Retrieve Attachment count',
        params => $params,
        returns => 'EzsignfolderGetAttachmentCountV1Response',
        };
}
# @return EzsignfolderGetAttachmentCountV1Response
#
sub ezsignfolder_get_attachment_count_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_attachment_count_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachmentCount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetAttachmentCountV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_attachments_v1
#
# Retrieve Ezsignfolder's Attachments
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_attachments_v1' } = {
        summary => 'Retrieve Ezsignfolder&#39;s Attachments',
        params => $params,
        returns => 'EzsignfolderGetAttachmentsV1Response',
        };
}
# @return EzsignfolderGetAttachmentsV1Response
#
sub ezsignfolder_get_attachments_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_attachments_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetAttachmentsV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_communication_count_v1
#
# Retrieve Communication count
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_communication_count_v1' } = {
        summary => 'Retrieve Communication count',
        params => $params,
        returns => 'EzsignfolderGetCommunicationCountV1Response',
        };
}
# @return EzsignfolderGetCommunicationCountV1Response
#
sub ezsignfolder_get_communication_count_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_communication_count_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetCommunicationCountV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_communication_list_v1
#
# Retrieve Communication list
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_communication_list_v1' } = {
        summary => 'Retrieve Communication list',
        params => $params,
        returns => 'EzsignfolderGetCommunicationListV1Response',
        };
}
# @return EzsignfolderGetCommunicationListV1Response
#
sub ezsignfolder_get_communication_list_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_communication_list_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetCommunicationListV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_communicationrecipients_v1
#
# Retrieve Ezsignfolder's Communicationrecipient
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_communicationrecipients_v1' } = {
        summary => 'Retrieve Ezsignfolder&#39;s Communicationrecipient',
        params => $params,
        returns => 'EzsignfolderGetCommunicationrecipientsV1Response',
        };
}
# @return EzsignfolderGetCommunicationrecipientsV1Response
#
sub ezsignfolder_get_communicationrecipients_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_communicationrecipients_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationrecipients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetCommunicationrecipientsV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_communicationsenders_v1
#
# Retrieve Ezsignfolder's Communicationsender
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_communicationsenders_v1' } = {
        summary => 'Retrieve Ezsignfolder&#39;s Communicationsender',
        params => $params,
        returns => 'EzsignfolderGetCommunicationsendersV1Response',
        };
}
# @return EzsignfolderGetCommunicationsendersV1Response
#
sub ezsignfolder_get_communicationsenders_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_communicationsenders_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationsenders';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetCommunicationsendersV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_ezsigndocuments_v1
#
# Retrieve an existing Ezsignfolder's Ezsigndocuments
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_ezsigndocuments_v1' } = {
        summary => 'Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments',
        params => $params,
        returns => 'EzsignfolderGetEzsigndocumentsV1Response',
        };
}
# @return EzsignfolderGetEzsigndocumentsV1Response
#
sub ezsignfolder_get_ezsigndocuments_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_ezsigndocuments_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetEzsigndocumentsV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_ezsignfoldersignerassociations_v1
#
# Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_ezsignfoldersignerassociations_v1' } = {
        summary => 'Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations',
        params => $params,
        returns => 'EzsignfolderGetEzsignfoldersignerassociationsV1Response',
        };
}
# @return EzsignfolderGetEzsignfoldersignerassociationsV1Response
#
sub ezsignfolder_get_ezsignfoldersignerassociations_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_ezsignfoldersignerassociations_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetEzsignfoldersignerassociationsV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_ezsignsignatures_automatic_v1
#
# Retrieve an existing Ezsignfolder's automatic Ezsignsignatures
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_ezsignsignatures_automatic_v1' } = {
        summary => 'Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures',
        params => $params,
        returns => 'EzsignfolderGetEzsignsignaturesAutomaticV1Response',
        };
}
# @return EzsignfolderGetEzsignsignaturesAutomaticV1Response
#
sub ezsignfolder_get_ezsignsignatures_automatic_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_ezsignsignatures_automatic_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetEzsignsignaturesAutomaticV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_forms_data_v1
#
# Retrieve an existing Ezsignfolder's forms data
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_forms_data_v1' } = {
        summary => 'Retrieve an existing Ezsignfolder&#39;s forms data',
        params => $params,
        returns => 'EzsignfolderGetFormsDataV1Response',
        };
}
# @return EzsignfolderGetFormsDataV1Response
#
sub ezsignfolder_get_forms_data_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_forms_data_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/zip');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetFormsDataV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_list_v1
#
# Retrieve Ezsignfolder list
#
# @param string $e_order_by Specify how you want the results to be sorted (optional)
# @param int $i_row_max  (optional)
# @param int $i_row_offset  (optional, default to 0)
# @param HeaderAcceptLanguage $accept_language  (optional)
# @param string $s_filter  (optional)
{
    my $params = {
    'e_order_by' => {
        data_type => 'string',
        description => 'Specify how you want the results to be sorted',
        required => '0',
    },
    'i_row_max' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'i_row_offset' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'accept_language' => {
        data_type => 'HeaderAcceptLanguage',
        description => '',
        required => '0',
    },
    's_filter' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_list_v1' } = {
        summary => 'Retrieve Ezsignfolder list',
        params => $params,
        returns => 'EzsignfolderGetListV1Response',
        };
}
# @return EzsignfolderGetListV1Response
#
sub ezsignfolder_get_list_v1 {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/getList';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'e_order_by'}) {
        $query_params->{'eOrderBy'} = $self->{api_client}->to_query_value($args{'e_order_by'});
    }

    # query params
    if ( exists $args{'i_row_max'}) {
        $query_params->{'iRowMax'} = $self->{api_client}->to_query_value($args{'i_row_max'});
    }

    # query params
    if ( exists $args{'i_row_offset'}) {
        $query_params->{'iRowOffset'} = $self->{api_client}->to_query_value($args{'i_row_offset'});
    }

    # query params
    if ( exists $args{'s_filter'}) {
        $query_params->{'sFilter'} = $self->{api_client}->to_query_value($args{'s_filter'});
    }

    # header params
    if ( exists $args{'accept_language'}) {
        $header_params->{'Accept-Language'} = $self->{api_client}->to_header_value($args{'accept_language'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetListV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_object_v1
#
# Retrieve an existing Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_object_v1' } = {
        summary => 'Retrieve an existing Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderGetObjectV1Response',
        };
}
# @return EzsignfolderGetObjectV1Response
#
sub ezsignfolder_get_object_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_object_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetObjectV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_object_v2
#
# Retrieve an existing Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_object_v2' } = {
        summary => 'Retrieve an existing Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderGetObjectV2Response',
        };
}
# @return EzsignfolderGetObjectV2Response
#
sub ezsignfolder_get_object_v2 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_object_v2");
    }

    # parse inputs
    my $_resource_path = '/2/object/ezsignfolder/{pkiEzsignfolderID}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetObjectV2Response', $response);
    return $_response_object;
}

#
# ezsignfolder_get_object_v3
#
# Retrieve an existing Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_get_object_v3' } = {
        summary => 'Retrieve an existing Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderGetObjectV3Response',
        };
}
# @return EzsignfolderGetObjectV3Response
#
sub ezsignfolder_get_object_v3 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_get_object_v3");
    }

    # parse inputs
    my $_resource_path = '/3/object/ezsignfolder/{pkiEzsignfolderID}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderGetObjectV3Response', $response);
    return $_response_object;
}

#
# ezsignfolder_import_ezsignfoldersignerassociations_v1
#
# Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderImportEzsignfoldersignerassociationsV1Request $ezsignfolder_import_ezsignfoldersignerassociations_v1_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_import_ezsignfoldersignerassociations_v1_request' => {
        data_type => 'EzsignfolderImportEzsignfoldersignerassociationsV1Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_import_ezsignfoldersignerassociations_v1' } = {
        summary => 'Import an existing Ezsignfoldersignerassociation into this Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderImportEzsignfoldersignerassociationsV1Response',
        };
}
# @return EzsignfolderImportEzsignfoldersignerassociationsV1Response
#
sub ezsignfolder_import_ezsignfoldersignerassociations_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_import_ezsignfoldersignerassociations_v1");
    }

    # verify the required parameter 'ezsignfolder_import_ezsignfoldersignerassociations_v1_request' is set
    unless (exists $args{'ezsignfolder_import_ezsignfoldersignerassociations_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_import_ezsignfoldersignerassociations_v1_request' when calling ezsignfolder_import_ezsignfoldersignerassociations_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_import_ezsignfoldersignerassociations_v1_request'}) {
        $_body_data = $args{'ezsignfolder_import_ezsignfoldersignerassociations_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderImportEzsignfoldersignerassociationsV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_import_ezsigntemplatepackage_v1
#
# Import an Ezsigntemplatepackage in the Ezsignfolder.
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderImportEzsigntemplatepackageV1Request $ezsignfolder_import_ezsigntemplatepackage_v1_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_import_ezsigntemplatepackage_v1_request' => {
        data_type => 'EzsignfolderImportEzsigntemplatepackageV1Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_import_ezsigntemplatepackage_v1' } = {
        summary => 'Import an Ezsigntemplatepackage in the Ezsignfolder.',
        params => $params,
        returns => 'EzsignfolderImportEzsigntemplatepackageV1Response',
        };
}
# @return EzsignfolderImportEzsigntemplatepackageV1Response
#
sub ezsignfolder_import_ezsigntemplatepackage_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_import_ezsigntemplatepackage_v1");
    }

    # verify the required parameter 'ezsignfolder_import_ezsigntemplatepackage_v1_request' is set
    unless (exists $args{'ezsignfolder_import_ezsigntemplatepackage_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_import_ezsigntemplatepackage_v1_request' when calling ezsignfolder_import_ezsigntemplatepackage_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_import_ezsigntemplatepackage_v1_request'}) {
        $_body_data = $args{'ezsignfolder_import_ezsigntemplatepackage_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderImportEzsigntemplatepackageV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_reorder_v1
#
# Reorder Ezsigndocuments in the Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderReorderV1Request $ezsignfolder_reorder_v1_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_reorder_v1_request' => {
        data_type => 'EzsignfolderReorderV1Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_reorder_v1' } = {
        summary => 'Reorder Ezsigndocuments in the Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderReorderV1Response',
        };
}
# @return EzsignfolderReorderV1Response
#
sub ezsignfolder_reorder_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_reorder_v1");
    }

    # verify the required parameter 'ezsignfolder_reorder_v1_request' is set
    unless (exists $args{'ezsignfolder_reorder_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_reorder_v1_request' when calling ezsignfolder_reorder_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_reorder_v1_request'}) {
        $_body_data = $args{'ezsignfolder_reorder_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderReorderV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_reorder_v2
#
# Reorder Ezsigndocuments in the Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderReorderV2Request $ezsignfolder_reorder_v2_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_reorder_v2_request' => {
        data_type => 'EzsignfolderReorderV2Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_reorder_v2' } = {
        summary => 'Reorder Ezsigndocuments in the Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderReorderV2Response',
        };
}
# @return EzsignfolderReorderV2Response
#
sub ezsignfolder_reorder_v2 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_reorder_v2");
    }

    # verify the required parameter 'ezsignfolder_reorder_v2_request' is set
    unless (exists $args{'ezsignfolder_reorder_v2_request'}) {
      croak("Missing the required parameter 'ezsignfolder_reorder_v2_request' when calling ezsignfolder_reorder_v2");
    }

    # parse inputs
    my $_resource_path = '/2/object/ezsignfolder/{pkiEzsignfolderID}/reorder';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_reorder_v2_request'}) {
        $_body_data = $args{'ezsignfolder_reorder_v2_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderReorderV2Response', $response);
    return $_response_object;
}

#
# ezsignfolder_send_v1
#
# Send the Ezsignfolder to the signatories for signature
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderSendV1Request $ezsignfolder_send_v1_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_send_v1_request' => {
        data_type => 'EzsignfolderSendV1Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_send_v1' } = {
        summary => 'Send the Ezsignfolder to the signatories for signature',
        params => $params,
        returns => 'EzsignfolderSendV1Response',
        };
}
# @return EzsignfolderSendV1Response
#
sub ezsignfolder_send_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_send_v1");
    }

    # verify the required parameter 'ezsignfolder_send_v1_request' is set
    unless (exists $args{'ezsignfolder_send_v1_request'}) {
      croak("Missing the required parameter 'ezsignfolder_send_v1_request' when calling ezsignfolder_send_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_send_v1_request'}) {
        $_body_data = $args{'ezsignfolder_send_v1_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderSendV1Response', $response);
    return $_response_object;
}

#
# ezsignfolder_send_v3
#
# Send the Ezsignfolder to the signatories for signature
#
# @param int $pki_ezsignfolder_id  (required)
# @param EzsignfolderSendV3Request $ezsignfolder_send_v3_request  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'ezsignfolder_send_v3_request' => {
        data_type => 'EzsignfolderSendV3Request',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_send_v3' } = {
        summary => 'Send the Ezsignfolder to the signatories for signature',
        params => $params,
        returns => 'EzsignfolderSendV3Response',
        };
}
# @return EzsignfolderSendV3Response
#
sub ezsignfolder_send_v3 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_send_v3");
    }

    # verify the required parameter 'ezsignfolder_send_v3_request' is set
    unless (exists $args{'ezsignfolder_send_v3_request'}) {
      croak("Missing the required parameter 'ezsignfolder_send_v3_request' when calling ezsignfolder_send_v3");
    }

    # parse inputs
    my $_resource_path = '/3/object/ezsignfolder/{pkiEzsignfolderID}/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'ezsignfolder_send_v3_request'}) {
        $_body_data = $args{'ezsignfolder_send_v3_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderSendV3Response', $response);
    return $_response_object;
}

#
# ezsignfolder_unsend_v1
#
# Unsend the Ezsignfolder
#
# @param int $pki_ezsignfolder_id  (required)
# @param object $body  (required)
{
    my $params = {
    'pki_ezsignfolder_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'object',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'ezsignfolder_unsend_v1' } = {
        summary => 'Unsend the Ezsignfolder',
        params => $params,
        returns => 'EzsignfolderUnsendV1Response',
        };
}
# @return EzsignfolderUnsendV1Response
#
sub ezsignfolder_unsend_v1 {
    my ($self, %args) = @_;

    # verify the required parameter 'pki_ezsignfolder_id' is set
    unless (exists $args{'pki_ezsignfolder_id'}) {
      croak("Missing the required parameter 'pki_ezsignfolder_id' when calling ezsignfolder_unsend_v1");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling ezsignfolder_unsend_v1");
    }

    # parse inputs
    my $_resource_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'pki_ezsignfolder_id'}) {
        my $_base_variable = "{" . "pkiEzsignfolderID" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pki_ezsignfolder_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(Authorization )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EzsignfolderUnsendV1Response', $response);
    return $_response_object;
}

1;
