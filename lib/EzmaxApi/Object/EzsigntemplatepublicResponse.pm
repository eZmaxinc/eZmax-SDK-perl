=begin comment

eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package EzmaxApi::Object::EzsigntemplatepublicResponse;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use EzmaxApi::Object::CommonAudit;
use EzmaxApi::Object::FieldEEzsigntemplatepublicLimittype;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#A Ezsigntemplatepublic Object
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "EzmaxApi::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => 'A Ezsigntemplatepublic Object',
                                  class => 'EzsigntemplatepublicResponse',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'pki_ezsigntemplatepublic_id' => {
        datatype => 'int',
        base_name => 'pkiEzsigntemplatepublicID',
        description => 'The unique ID of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    'fki_ezsignfoldertype_id' => {
        datatype => 'int',
        base_name => 'fkiEzsignfoldertypeID',
        description => 'The unique ID of the Ezsignfoldertype.',
        format => '',
        read_only => '',
            },
    's_ezsignfoldertype_name_x' => {
        datatype => 'string',
        base_name => 'sEzsignfoldertypeNameX',
        description => 'The name of the Ezsignfoldertype in the language of the requester',
        format => '',
        read_only => '',
            },
    'fki_userlogintype_id' => {
        datatype => 'int',
        base_name => 'fkiUserlogintypeID',
        description => 'The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     ',
        format => '',
        read_only => '',
            },
    's_userlogintype_description_x' => {
        datatype => 'string',
        base_name => 'sUserlogintypeDescriptionX',
        description => 'The description of the Userlogintype in the language of the requester',
        format => '',
        read_only => '',
            },
    'fki_ezsigntemplate_id' => {
        datatype => 'int',
        base_name => 'fkiEzsigntemplateID',
        description => 'The unique ID of the Ezsigntemplate',
        format => '',
        read_only => '',
            },
    'fki_ezsigntemplatepackage_id' => {
        datatype => 'int',
        base_name => 'fkiEzsigntemplatepackageID',
        description => 'The unique ID of the Ezsigntemplatepackage',
        format => '',
        read_only => '',
            },
    's_ezsigntemplatepublic_description' => {
        datatype => 'string',
        base_name => 'sEzsigntemplatepublicDescription',
        description => 'The description of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    's_ezsigntemplatepublic_referenceid' => {
        datatype => 'string',
        base_name => 'sEzsigntemplatepublicReferenceid',
        description => 'The referenceid of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    'b_ezsigntemplatepublic_isactive' => {
        datatype => 'boolean',
        base_name => 'bEzsigntemplatepublicIsactive',
        description => 'Whether the ezsigntemplatepublic is active or not',
        format => '',
        read_only => '',
            },
    't_ezsigntemplatepublic_note' => {
        datatype => 'string',
        base_name => 'tEzsigntemplatepublicNote',
        description => 'The note of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    'e_ezsigntemplatepublic_limittype' => {
        datatype => 'FieldEEzsigntemplatepublicLimittype',
        base_name => 'eEzsigntemplatepublicLimittype',
        description => '',
        format => '',
        read_only => '',
            },
    'i_ezsigntemplatepublic_limit' => {
        datatype => 'int',
        base_name => 'iEzsigntemplatepublicLimit',
        description => 'The limit of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    'i_ezsigntemplatepublic_limitexceeded' => {
        datatype => 'int',
        base_name => 'iEzsigntemplatepublicLimitexceeded',
        description => 'The limitexceeded of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    'dt_ezsigntemplatepublic_limitexceededsince' => {
        datatype => 'string',
        base_name => 'dtEzsigntemplatepublicLimitexceededsince',
        description => 'The limitexceededsince of the Ezsigntemplatepublic',
        format => '',
        read_only => '',
            },
    's_ezsigntemplatepublic_url' => {
        datatype => 'string',
        base_name => 'sEzsigntemplatepublicUrl',
        description => 'The url of the Ezsigntemplatepublic  You can add these value as query parameters to prefill the corresponding role  |Parameter|Description| |-|-| |sEzsigntemplatesignerDescription|The role to fill| |sContactFirstname|The contact firstname| |sContactLastname|The contact lastname| |sEmailAddress|The contact email| |sPhoneE164|The contact phone number| |sPhoneE164Cell|The contact cell phone number|',
        format => '',
        read_only => '',
            },
    's_ezsigntemplatepublic_ezsigntemplatedescription' => {
        datatype => 'string',
        base_name => 'sEzsigntemplatepublicEzsigntemplatedescription',
        description => 'The Ezsigntemplate/Ezsigntemplatepackage description',
        format => '',
        read_only => '',
            },
    'obj_audit' => {
        datatype => 'CommonAudit',
        base_name => 'objAudit',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'pki_ezsigntemplatepublic_id' => 'int',
    'fki_ezsignfoldertype_id' => 'int',
    's_ezsignfoldertype_name_x' => 'string',
    'fki_userlogintype_id' => 'int',
    's_userlogintype_description_x' => 'string',
    'fki_ezsigntemplate_id' => 'int',
    'fki_ezsigntemplatepackage_id' => 'int',
    's_ezsigntemplatepublic_description' => 'string',
    's_ezsigntemplatepublic_referenceid' => 'string',
    'b_ezsigntemplatepublic_isactive' => 'boolean',
    't_ezsigntemplatepublic_note' => 'string',
    'e_ezsigntemplatepublic_limittype' => 'FieldEEzsigntemplatepublicLimittype',
    'i_ezsigntemplatepublic_limit' => 'int',
    'i_ezsigntemplatepublic_limitexceeded' => 'int',
    'dt_ezsigntemplatepublic_limitexceededsince' => 'string',
    's_ezsigntemplatepublic_url' => 'string',
    's_ezsigntemplatepublic_ezsigntemplatedescription' => 'string',
    'obj_audit' => 'CommonAudit'
} );

__PACKAGE__->attribute_map( {
    'pki_ezsigntemplatepublic_id' => 'pkiEzsigntemplatepublicID',
    'fki_ezsignfoldertype_id' => 'fkiEzsignfoldertypeID',
    's_ezsignfoldertype_name_x' => 'sEzsignfoldertypeNameX',
    'fki_userlogintype_id' => 'fkiUserlogintypeID',
    's_userlogintype_description_x' => 'sUserlogintypeDescriptionX',
    'fki_ezsigntemplate_id' => 'fkiEzsigntemplateID',
    'fki_ezsigntemplatepackage_id' => 'fkiEzsigntemplatepackageID',
    's_ezsigntemplatepublic_description' => 'sEzsigntemplatepublicDescription',
    's_ezsigntemplatepublic_referenceid' => 'sEzsigntemplatepublicReferenceid',
    'b_ezsigntemplatepublic_isactive' => 'bEzsigntemplatepublicIsactive',
    't_ezsigntemplatepublic_note' => 'tEzsigntemplatepublicNote',
    'e_ezsigntemplatepublic_limittype' => 'eEzsigntemplatepublicLimittype',
    'i_ezsigntemplatepublic_limit' => 'iEzsigntemplatepublicLimit',
    'i_ezsigntemplatepublic_limitexceeded' => 'iEzsigntemplatepublicLimitexceeded',
    'dt_ezsigntemplatepublic_limitexceededsince' => 'dtEzsigntemplatepublicLimitexceededsince',
    's_ezsigntemplatepublic_url' => 'sEzsigntemplatepublicUrl',
    's_ezsigntemplatepublic_ezsigntemplatedescription' => 'sEzsigntemplatepublicEzsigntemplatedescription',
    'obj_audit' => 'objAudit'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
